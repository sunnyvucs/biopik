{"version":3,"sources":["CustomerPage.js","App.js","reportWebVitals.js","index.js"],"names":["CustomerPage","phone","setPhone","useState","name","setName","address","setAddress","statusMessage","setStatusMessage","showOrderSection","setShowOrderSection","React","createElement","className","type","value","onChange","e","target","placeholder","id","onClick","async","response","fetch","customer","text","split","slice","map","row","find","trim","error","console","submitCustomerDetails","alert","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+JAyFeA,MAvFMA,KACjB,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAMC,GAAWF,mBAAS,KAC1BG,EAASC,GAAcJ,mBAAS,KAChCK,EAAeC,GAAoBN,mBAAS,KAC5CO,EAAkBC,GAAuBR,oBAAS,GAmCzD,OACIS,IAAAC,cAAA,OAAKC,UAAU,oCACXF,IAAAC,cAAA,OAAKC,UAAU,qCACXF,IAAAC,cAAA,MAAIC,UAAU,0BAAyB,oBAEvCF,IAAAC,cAAA,SAAOC,UAAU,+BAA8B,iBAC/CF,IAAAC,cAAA,SACIE,KAAK,OACLC,MAAOf,EACPgB,SAAWC,GAAMhB,EAASgB,EAAEC,OAAOH,OACnCF,UAAU,iCACVM,YAAY,uBAGhBR,IAAAC,cAAA,OAAKQ,GAAG,mBACJT,IAAAC,cAAA,SAAOC,UAAU,+BAA8B,SAC/CF,IAAAC,cAAA,SACIE,KAAK,OACLC,MAAOZ,EACPa,SAAWC,GAAMb,EAAQa,EAAEC,OAAOH,OAClCF,UAAU,mCAGdF,IAAAC,cAAA,SAAOC,UAAU,+BAA8B,YAC/CF,IAAAC,cAAA,SACIE,KAAK,OACLC,MAAOV,EACPW,SAAWC,GAAMX,EAAWW,EAAEC,OAAOH,OACrCF,UAAU,oCAIlBF,IAAAC,cAAA,UAAQS,QA/DSC,UACzB,IACI,MAAMC,QAAiBC,MAJN,kJAQXC,SAHaF,EAASG,QACVC,MAAM,MAAMC,MAAM,GAAGC,IAAIC,GAAOA,EAAIH,MAAM,MAEtCI,KAAKD,GAAOA,EAAI,GAAGE,SAAWhC,GAEhDyB,GACArB,EAAQqB,EAAS,GAAGO,QACpB1B,EAAWmB,EAAS,GAAGO,QACvBxB,EAAiB,wCACjBE,GAAoB,IAEpBF,EAAiB,2DAEvB,MAAOyB,GACLzB,EAAiB,4DACjB0B,QAAQD,MAAMA,KA6C6BpB,UAAU,4CAA2C,iBAC5FF,IAAAC,cAAA,UAAQS,QA1CUc,KACrBnC,GAAUG,GAASE,GAIxBG,EAAiB,2CACjBE,GAAoB,IAJhB0B,MAAM,8CAwCsCvB,UAAU,kDAAiD,UAEnGF,IAAAC,cAAA,KAAGC,UAAU,8BAA8BN,GAE1CE,GACGE,IAAAC,cAAA,UAAQC,UAAU,yDAAwD,+BCrE/EwB,MARf,WACE,OACE1B,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAACb,EAAY,QCMJuC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAxB,EAAA,GAAAyB,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAACyB,EAAG,QAORC","file":"static/js/main.d6badde9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst CustomerPage = () => {\n    const [phone, setPhone] = useState('');\n    const [name, setName] = useState('');\n    const [address, setAddress] = useState('');\n    const [statusMessage, setStatusMessage] = useState('');\n    const [showOrderSection, setShowOrderSection] = useState(false);\n\n    const customerSheetURL = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vT6ScA16RqJQwqQsusoqHTqTmoRfApVDoGiBm92NoIbvLDBkVd9wu_YHIgAiCcZkXjSCZ1fXjwnzv8N/pub?output=csv\";\n\n    const fetchCustomerDetails = async () => {\n        try {\n            const response = await fetch(customerSheetURL);\n            const data = await response.text();\n            const rows = data.split(\"\\n\").slice(1).map(row => row.split(\",\"));\n\n            const customer = rows.find(row => row[1].trim() === phone);\n\n            if (customer) {\n                setName(customer[2].trim());\n                setAddress(customer[3].trim());\n                setStatusMessage(\"Customer details found successfully.\");\n                setShowOrderSection(true);\n            } else {\n                setStatusMessage(\"Customer details not found. Please fill the form below.\");\n            }\n        } catch (error) {\n            setStatusMessage(\"Error fetching customer details. Please try again later.\");\n            console.error(error);\n        }\n    };\n\n    const submitCustomerDetails = () => {\n        if (!phone || !name || !address) {\n            alert(\"Please fill all fields before submitting.\");\n            return;\n        }\n        setStatusMessage(\"Customer details captured successfully.\");\n        setShowOrderSection(true);\n    };\n\n    return (\n        <div className=\"bg-gray-100 p-4 max-w-lg mx-auto\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n                <h2 className=\"text-xl font-bold mb-4\">Customer Details</h2>\n\n                <label className=\"block text-sm font-semibold\">Phone Number:</label>\n                <input\n                    type=\"text\"\n                    value={phone}\n                    onChange={(e) => setPhone(e.target.value)}\n                    className=\"w-full p-2 border rounded mb-4\"\n                    placeholder=\"Enter Phone Number\"\n                />\n\n                <div id=\"customerDetails\">\n                    <label className=\"block text-sm font-semibold\">Name:</label>\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        className=\"w-full p-2 border rounded mb-2\"\n                    />\n\n                    <label className=\"block text-sm font-semibold\">Address:</label>\n                    <input\n                        type=\"text\"\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)}\n                        className=\"w-full p-2 border rounded mb-4\"\n                    />\n                </div>\n\n                <button onClick={fetchCustomerDetails} className=\"bg-blue-500 text-white px-4 py-2 rounded\">Check Details</button>\n                <button onClick={submitCustomerDetails} className=\"bg-green-500 text-white px-4 py-2 rounded ml-2\">Submit</button>\n\n                <p className=\"mt-4 text-center font-bold\">{statusMessage}</p>\n\n                {showOrderSection && (\n                    <button className=\"mt-4 bg-green-500 text-white px-4 py-2 rounded w-full\">\n                        Proceed to Order Veggies\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default CustomerPage;\n","import React from 'react';\nimport CustomerPage from './CustomerPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomerPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}